{"version":3,"file":"extension.js","mappings":"swBAEA,kBACA,IAAIA,EACAC,EAEJ,SAASC,IACPF,EAAY,IAAIG,KAChBF,EAAQG,aAAY,KAClB,IACIC,GADc,IAAIF,MACOG,WAAaN,GAAWM,WAAa,GAClEC,EAAOC,OAAOC,uBACZ,eAAeC,KAAKC,MAAMN,EAAa,gBACxC,GACA,IACL,CAEA,SAASO,IACHX,GAAOY,cAAcZ,GACzBM,EAAOC,OAAOC,uBAAuB,oBACrCT,OAAYc,CACd,CAKA,oBAAyBC,GACvB,IAAIC,EAAeT,EAAOU,SAASC,gBACjC,yBACAhB,GAEEiB,EAAcZ,EAAOU,SAASC,gBAChC,wBACAN,GAEFG,EAAQK,cAAcC,KAAKL,EAAcG,EAC3C,EAGA,wBAA8B,C,UCvC9BG,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBd,IAAjBe,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAO,EAAoBF,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://jira-work-logger/./src/extension.ts","webpack://jira-work-logger/external commonjs \"vscode\"","webpack://jira-work-logger/webpack/bootstrap","webpack://jira-work-logger/webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode in your code below\r\nimport * as vscode from \"vscode\";\r\nlet startTime: Date | undefined;\r\nlet timer: NodeJS.Timeout | undefined;\r\n\r\nfunction startLogging() {\r\n  startTime = new Date();\r\n  timer = setInterval(() => {\r\n    let currentTime = new Date();\r\n    let difference = currentTime.getTime() - (startTime?.getTime() || 0);\r\n    vscode.window.showInformationMessage(\r\n      `Working for ${Math.floor(difference / 1000)} seconds.`\r\n    );\r\n  }, 1000);\r\n}\r\n\r\nfunction stopLogging() {\r\n  if (timer) clearInterval(timer);\r\n  vscode.window.showInformationMessage(\"Stopped logging.\");\r\n  startTime = undefined;\r\n}\r\n\r\n// This method is called when your extension is activated\r\n// Your extension is activated the very first time the command is executed\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  let startCommand = vscode.commands.registerCommand(\r\n    \"extension.startLogging\",\r\n    startLogging\r\n  );\r\n  let stopCommand = vscode.commands.registerCommand(\r\n    \"extension.stopLogging\",\r\n    stopLogging\r\n  );\r\n  context.subscriptions.push(startCommand, stopCommand);\r\n}\r\n\r\n// This method is called when your extension is deactivated\r\nexport function deactivate() {}\r\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["startTime","timer","startLogging","Date","setInterval","difference","getTime","vscode","window","showInformationMessage","Math","floor","stopLogging","clearInterval","undefined","context","startCommand","commands","registerCommand","stopCommand","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}